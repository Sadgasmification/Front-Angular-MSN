/// <reference types="node" />
import * as amqp from 'amqplib';
import { EventEmitter } from 'events';
import { AmqpClient } from './client';
import { PublishOptions, QueueOptions, ReplyableMessage, ReplyOptions, SubscribeOptions } from './types';
export declare class AmqpQueue<T = Buffer> extends EventEmitter {
    private client;
    channel: Promise<amqp.ConfirmChannel>;
    queue: Promise<amqp.Replies.AssertQueue>;
    rpcQueue: Promise<amqp.Replies.AssertQueue>;
    options: QueueOptions;
    /**
     * Creates an instance of AmqpQueue.
     * @param {AmqpClient} client
     * @param {QueueOptions} [options]
     * @memberof AmqpQueue
     */
    constructor(client: AmqpClient, options?: QueueOptions);
    /**
     * Subscribe to a channel
     *
     * @param {(message: ReplyableMessage) => void} callback
     * @param {SubscribeOptions} [options={}]
     * @returns {Promise<amqp.Replies.Consume>}
     * @memberof AmqpQueue
     */
    subscribe(callback: (message: ReplyableMessage<T>) => void, options?: SubscribeOptions): Promise<amqp.Replies.Consume>;
    /**
     * Publish content to a queue
     *
     * @param {*} content
     * @param {PublishOptions} [options={}]
     * @returns {Promise<{ content: any; properties: PublishOptions }>}
     * @memberof AmqpQueue
     */
    publish(content: any, options?: PublishOptions): Promise<{
        content: any;
        properties: PublishOptions;
    }>;
    /**
     * Reply to a message by id or message
     *
     * @param {(string|amqp.Message)} idOrMessage
     * @returns {Promise<amqp.Message>}
     * @memberof AmqpQueue
     */
    replyOf(idOrMessage: string | amqp.Message): Promise<amqp.Message>;
    /**
     * Reply to a channel
     *
     * @param {*} content
     * @param {ReplyOptions} [options={}]
     * @returns {Promise<{ content: any, properties: ReplyOptions }>}
     * @memberof AmqpQueue
     */
    reply(content: any, options: ReplyOptions): Promise<{
        content: any;
        properties: ReplyOptions;
    }>;
    /**
     * Bind queue to exchange
     *
     * @param {string} queue
     * @param {string} routingKey
     * @param {*} [opts={}]
     * @memberOf AmqpQueue
     */
    bindQueue(queue: string, routingKey: string, opts?: any): Promise<{
        queue: string;
        exchange: string;
        routingKey: string;
    }>;
    /**
     * Unbind queue from exchange
     *
     * @param {string} queue
     * @param {string} routingKey
     * @param {*} [opts={}]
     * @memberOf AmqpQueue
     */
    unbindQueue(queue: string, routingKey: string, opts?: any): Promise<{
        queue: string;
        exchange: string;
        routingKey: string;
    }>;
    /**
     * Acknowledge a message
     *
     * @param {amqp.Message} message
     * @returns {Promise<void>}
     * @memberof AmqpQueue
     */
    ack(message: amqp.Message): Promise<void>;
    /**
     * Purge the queue
     *
     * @returns {Promise<amqp.Replies.PurgeQueue>}
     * @memberof AmqpQueue
     */
    purge(): Promise<amqp.Replies.PurgeQueue>;
    /**
     * Create a queue
     *
     * @private
     * @returns {Promise<amqp.Replies.AssertQueue>}
     * @memberof AmqpQueue
     */
    private createQueue();
    /**
     * Consume any replies on the queue
     *
     * @private
     * @returns {Promise<void>}
     * @memberof AmqpQueue
     */
    private consumeReplies();
}
