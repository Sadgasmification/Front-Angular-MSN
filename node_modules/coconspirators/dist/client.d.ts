/// <reference types="node" />
import * as amqp from 'amqplib';
import { EventEmitter } from 'events';
import { ChannelOptions } from '.';
export declare class AmqpClient extends EventEmitter {
    connection: Promise<amqp.Connection>;
    channel: Promise<amqp.ConfirmChannel>;
    uri: string;
    private deferredConnection;
    private deferredChannel;
    /**
     * Creates an instance of AmqpClient.
     *
     * @memberof AmqpClient
     */
    constructor();
    /**
     * Connect to the queue
     *
     * @param {string} [uri='amqp://localhost:5672'] uri to amqp server
     * @param {amqp.Connection|Promise<amqp.Connection>} conn an already established connection or Promise to one
     * @returns {Promise<amqp.Connection>}
     * @memberof AmqpClient
     */
    connect(uri?: string, conn?: amqp.Connection | Promise<amqp.Connection>): Promise<amqp.Connection>;
    /**
     * Reconnect to the queue
     *
     * @returns {Promise<amqp.Connection>}
     * @memberof AmqpClient
     */
    reconnect(): Promise<amqp.Connection>;
    /**
     * Disconnect from the queue
     *
     * @returns {Promise<void>}
     * @memberof AmqpClient
     */
    disconnect(): Promise<void>;
    /**
     * Create a channel
     *
     * @private
     * @returns {Promise<amqp.ConfirmChannel>}
     * @memberof AmqpClient
     */
    createChannel(opts?: ChannelOptions): Promise<amqp.ConfirmChannel>;
    /**
     * Create a connection
     *
     * @private
     * @param {string} uri
     * @returns {Promise<amqp.Connection>}
     * @memberof AmqpClient
     */
    private createConnection(uri);
    /**
     * Setup listeners to connection events
     *
     * @private
     * @returns {Promise<void>}
     * @memberof AmqpClient
     */
    private setupListeners();
}
