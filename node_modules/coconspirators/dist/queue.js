"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const shortid = require("shortid");
const types_1 = require("./types");
class AmqpQueue extends events_1.EventEmitter {
    /**
     * Creates an instance of AmqpQueue.
     * @param {AmqpClient} client
     * @param {QueueOptions} [options]
     * @memberof AmqpQueue
     */
    constructor(client, options) {
        super();
        this.client = client;
        this.options = {
            exchange: '',
            durable: false,
            noAck: true
        };
        // if decorated, get decorations and merge
        const metadata = Reflect.getMetadata(types_1.NAME_KEY, this);
        if (metadata) {
            Object.assign(this.options, metadata);
        }
        // if options passed in manually, extend options
        if (options) {
            Object.assign(this.options, options);
        }
        // do we need our own channel?
        if (this.options.channel) {
            this.channel = this.client.createChannel(this.options.channel);
        }
        else {
            this.channel = this.client.channel;
        }
        this.queue = this.createQueue();
    }
    /**
     * Subscribe to a channel
     *
     * @param {(message: ReplyableMessage) => void} callback
     * @param {SubscribeOptions} [options={}]
     * @returns {Promise<amqp.Replies.Consume>}
     * @memberof AmqpQueue
     */
    async subscribe(callback, options = {}) {
        const chnl = await this.channel;
        const opts = Object.assign({}, this.options, options);
        return chnl.consume(this.options.name || '', async (message) => {
            if (opts.contentType === 'application/json') {
                message.body = JSON.parse(message.content.toString());
            }
            message.reply = (content) => {
                return this.reply(content, {
                    replyTo: message.properties.replyTo,
                    correlationId: message.properties.correlationId
                });
            };
            message.ack = () => {
                this.ack(message);
            };
            callback(message);
        }, opts);
    }
    /**
     * Publish content to a queue
     *
     * @param {*} content
     * @param {PublishOptions} [options={}]
     * @returns {Promise<{ content: any; properties: PublishOptions }>}
     * @memberof AmqpQueue
     */
    async publish(content, options = {}) {
        const chnl = await this.channel;
        const opts = Object.assign({}, this.options, options);
        if (this.rpcQueue) {
            opts.correlationId = shortid.generate();
            opts.replyTo = (await this.rpcQueue).queue;
        }
        if (opts.contentType === 'application/json') {
            const json = JSON.stringify(content);
            content = new Buffer(json);
        }
        const exchange = options.exchangeOverride === '' || options.exchangeOverride ?
            options.exchangeOverride :
            this.options.exchange;
        chnl.publish(exchange || '', options.routingKey || this.options.name || '', content, opts);
        return {
            content,
            properties: opts
        };
    }
    /**
     * Reply to a message by id or message
     *
     * @param {(string|amqp.Message)} idOrMessage
     * @returns {Promise<amqp.Message>}
     * @memberof AmqpQueue
     */
    async replyOf(idOrMessage) {
        const id = typeof idOrMessage !== 'string' ? idOrMessage.properties.correlationId : idOrMessage;
        return new Promise((resolve, reject) => {
            this.once(id, (message) => {
                if (this.options.contentType === 'application/json') {
                    try {
                        message.content = JSON.parse(message.content.toString());
                    }
                    catch (e) { /* do nothing */ }
                }
                resolve(message);
            });
        });
    }
    /**
     * Reply to a channel
     *
     * @param {*} content
     * @param {ReplyOptions} [options={}]
     * @returns {Promise<{ content: any, properties: ReplyOptions }>}
     * @memberof AmqpQueue
     */
    async reply(content, options) {
        const chnl = await this.channel;
        if (this.options.contentType === 'application/json') {
            const json = JSON.stringify(content);
            content = new Buffer(json);
        }
        chnl.sendToQueue(options.replyTo, content, options);
        return {
            content,
            properties: options
        };
    }
    /**
     * Bind queue to exchange
     *
     * @param {string} queue
     * @param {string} routingKey
     * @param {*} [opts={}]
     * @memberOf AmqpQueue
     */
    async bindQueue(queue, routingKey, opts = {}) {
        const chnl = await this.channel;
        await chnl.bindQueue(queue, this.options.exchange || '', routingKey, opts);
        return {
            queue,
            exchange: this.options.exchange || '',
            routingKey
        };
    }
    /**
     * Unbind queue from exchange
     *
     * @param {string} queue
     * @param {string} routingKey
     * @param {*} [opts={}]
     * @memberOf AmqpQueue
     */
    async unbindQueue(queue, routingKey, opts = {}) {
        const chnl = await this.channel;
        await chnl.unbindQueue(queue, this.options.exchange || '', routingKey, opts);
        return {
            queue,
            exchange: this.options.exchange || '',
            routingKey
        };
    }
    /**
     * Acknowledge a message
     *
     * @param {amqp.Message} message
     * @returns {Promise<void>}
     * @memberof AmqpQueue
     */
    async ack(message) {
        const chnl = await this.channel;
        chnl.ack(message);
    }
    /**
     * Purge the queue
     *
     * @returns {Promise<amqp.Replies.PurgeQueue>}
     * @memberof AmqpQueue
     */
    async purge() {
        const chnl = await this.channel;
        return chnl.purgeQueue(this.options.name || '');
    }
    /**
     * Create a queue
     *
     * @private
     * @returns {Promise<amqp.Replies.AssertQueue>}
     * @memberof AmqpQueue
     */
    createQueue() {
        return new Promise(async (resolve, reject) => {
            try {
                const chnl = await this.channel;
                const queue = await chnl.assertQueue(this.options.name || '', this.options);
                await this.consumeReplies();
                resolve(queue);
            }
            catch (e) {
                reject(e);
            }
        });
    }
    /**
     * Consume any replies on the queue
     *
     * @private
     * @returns {Promise<void>}
     * @memberof AmqpQueue
     */
    async consumeReplies() {
        if (!this.options.rpc)
            return;
        const chnl = await this.channel;
        // Wrap Bluebird in native Promise
        this.rpcQueue = new Promise((resolve, reject) => {
            chnl.assertQueue('', {
                exclusive: this.options.exclusive
            }).then(resolve, reject);
        });
        chnl.consume((await this.rpcQueue).queue, (result) => {
            if (result)
                this.emit(result.properties.correlationId, result);
        }, { noAck: true });
    }
}
exports.AmqpQueue = AmqpQueue;
//# sourceMappingURL=data:application/json;base64,