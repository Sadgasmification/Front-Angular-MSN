"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const amqp = require("amqplib");
const events_1 = require("events");
const retry = require("retry");
const deferred_1 = require("./deferred");
class AmqpClient extends events_1.EventEmitter {
    /**
     * Creates an instance of AmqpClient.
     *
     * @memberof AmqpClient
     */
    constructor() {
        super();
        this.deferredConnection = new deferred_1.Deferred();
        this.connection = this.deferredConnection.promise;
        this.deferredChannel = new deferred_1.Deferred();
        this.channel = this.deferredChannel.promise;
    }
    /**
     * Connect to the queue
     *
     * @param {string} [uri='amqp://localhost:5672'] uri to amqp server
     * @param {amqp.Connection|Promise<amqp.Connection>} conn an already established connection or Promise to one
     * @returns {Promise<amqp.Connection>}
     * @memberof AmqpClient
     */
    connect(uri = 'amqp://localhost:5672', conn) {
        this.uri = uri;
        if (conn === undefined) {
            this.deferredConnection.resolve(this.createConnection(this.uri));
        }
        else {
            this.deferredConnection.resolve(conn);
        }
        this.setupListeners();
        this.deferredChannel.resolve(this.createChannel());
        return this.connection;
    }
    /**
     * Reconnect to the queue
     *
     * @returns {Promise<amqp.Connection>}
     * @memberof AmqpClient
     */
    async reconnect() {
        await this.disconnect();
        return this.connect(this.uri);
    }
    /**
     * Disconnect from the queue
     *
     * @returns {Promise<void>}
     * @memberof AmqpClient
     */
    async disconnect() {
        const conn = await this.connection;
        return conn.close();
    }
    /**
     * Create a channel
     *
     * @private
     * @returns {Promise<amqp.ConfirmChannel>}
     * @memberof AmqpClient
     */
    async createChannel(opts = {}) {
        return new Promise(async (resolve, reject) => {
            const connection = await this.connection;
            try {
                const channel = await connection.createConfirmChannel();
                // set prefetch
                if (opts.prefetch) {
                    await channel.prefetch(opts.prefetch);
                }
                resolve(channel);
            }
            catch (err) {
                this.emit(err);
                reject(err);
            }
        });
    }
    /**
     * Create a connection
     *
     * @private
     * @param {string} uri
     * @returns {Promise<amqp.Connection>}
     * @memberof AmqpClient
     */
    createConnection(uri) {
        return new Promise((resolve, reject) => {
            const operation = retry.operation();
            operation.attempt(async (attempt) => {
                try {
                    const connection = await amqp.connect(uri);
                    this.emit('connected');
                    resolve(connection);
                }
                catch (e) {
                    if (operation.retry(e))
                        return;
                    this.emit('error', e);
                    reject(e);
                }
            });
        });
    }
    /**
     * Setup listeners to connection events
     *
     * @private
     * @returns {Promise<void>}
     * @memberof AmqpClient
     */
    async setupListeners() {
        const connection = await this.connection;
        connection.once('close', (err) => {
            this.emit('disconnected', err);
        });
        connection.on('error', (err) => {
            this.emit('error', err);
            this.emit('disconnected', err);
        });
        process.on('SIGINT', () => {
            connection.close().then(() => {
                this.emit('disconnected');
                process.exit(0);
            }, (err) => {
                this.emit('error', err);
                this.emit('disconnected', err);
                process.exit(1);
            });
        });
    }
}
exports.AmqpClient = AmqpClient;
//# sourceMappingURL=data:application/json;base64,