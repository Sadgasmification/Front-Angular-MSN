/// <reference types="node" />
import * as amqp from 'amqplib';
import { EventEmitter } from 'events';
import { AmqpClient } from './client';
import { ExchangeOptions } from './types';
export declare class AmqpExchange<T> extends EventEmitter {
    private client;
    channel: Promise<amqp.ConfirmChannel>;
    exchange: Promise<amqp.Replies.AssertExchange>;
    name: string;
    options: ExchangeOptions;
    /**
     * Creates an instance of AmqpExchange.
     * @param {AmqpClient} client
     * @param {QueueOptions} [options]
     * @memberof AmqpExchange
     */
    constructor(client: AmqpClient, options?: ExchangeOptions);
    /**
     * Publish a message to the Exchange
     *
     * @param {T} content The content of the message
     * @param {string} [routingKey=''] The routing key for the message
     * @param {amqp.Options.Publish} [options={}] Any options added to message
     * @returns {Promise<boolean>} True if message accepted, false if write buffer is full
     * @memberof AmqpExchange
     */
    publish(content: T, routingKey?: string, options?: amqp.Options.Publish): Promise<boolean>;
    /**
     * Deletes the exchange
     *
     * @param {amqp.Options.DeleteExchange} [options] { ifUnused: true|false }
     * @returns {Promise<void>}
     * @memberof AmqpExchange
     */
    deleteExchange(options?: amqp.Options.DeleteExchange): Promise<void>;
    /**
     * Bind this exchange to another exchange
     *
     * @param {string} destination The name of the destination exchange
     * @param {string} pattern The pattern to match messages to send
     * @param {*} [args] Any arguments (headers, etc)
     * @returns {Promise<void>}
     * @memberof AmqpExchange
     */
    bindExchange(destination: string, pattern: string, args?: any): Promise<void>;
    /**
     * Unbind an exchange to this exchange
     * The destination, pattern, and args must match those given when exchange was bound
     *
     * @param {string} destination The name of the destination exchange
     * @param {string} pattern The pattern to match message to send
     * @param {*} [args] Any arguments (headers, etc)
     * @returns {Promise<void>}
     * @memberof AmqpExchange
     */
    unbindExchange(destination: string, pattern: string, args?: any): Promise<void>;
    /**
     * Bind a queue to this exchange
     *
     * @param {string} queue The name of the queue
     * @param {string} pattern The pattern to match message to send
     * @param {*} [args] Any arguements (headers, etc)
     * @returns {Promise<void>}
     * @memberof AmqpExchange
     */
    bindQueue(queue: string, pattern: string, args?: any): Promise<void>;
    /**
     * Unbind a queue to this exchange
     * The destination, pattern, and args must match those given when queue was bound
     *
     * @param {string} queue The name of the queue
     * @param {string} pattern The pattern to match message to send
     * @param {*} [args] Any arguements (headers, etc)
     * @returns {Promise<amqp.Replies.Empty>}
     * @memberof AmqpExchange
     */
    unbindQueue(queue: string, pattern: string, args?: any): Promise<void>;
    /**
     * Create the Exchange
     *
     * @private
     * @returns {Promise<amqp.Replies.AssertExchange>}
     * @memberof AmqpExchange
     */
    private createExchange();
}
